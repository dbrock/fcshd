#!/usr/bin/env ruby

begin
  require "fcshd"
rescue LoadError
  require "pathname"
  $: << File.expand_path("../../lib", Pathname.new(__FILE__).realpath)
  require "fcshd"
end

require "optparse"
require "socket"

def die(message)
  puts "#{File.basename($0)}: #{message}"
  exit 1
end

$output_file = nil
$source_files = []
$libraries = []
$library_files = []
$directories = []
$production = false
$extra_arguments = []
$verbose = false
$restart_compiler = false
$run_compilation = nil
$dry_run = false

OptionParser.new do |parser|
  parser.banner = <<EOF
Usage: fcshc MAIN.[as|mxml] [-l LIB] [SRCDIR|SWCDIR|SWC]... [-o OUT.swf]
       fcshc -o OUT.swc SRCDIR... [-l LIB]... [SWCDIR|SWC]...

To compile an SWF, name the main application source file, then any
additional source directories, SWC directories, or SWC files.

To compile an SWC using `compc', you must provide the `-o' option, and
then at least one source directory, SWC directory, or SWC file.

Dependencies can also be specified by name using the `-l LIB' option,
which will search for LIB or LIB.swc in `~/.fcshd-lib'.  Both source
directories, SWC directories, and SWC files can be named in this way.

To pass extra arguments, use e.g. `-X -include-file -X NAME -X FILE'.

EOF

  parser.on("-o", "--output OUTPUT.[swf|swc]", "Name of the resulting binary") do |value|
    $run_compilation = true
    $output_file = File.expand_path(value)
  end

  parser.on("-l", "--library LIBRARY", "Search LIBRARY when compiling") do |value|
    $run_compilation = true
    $libraries << value
  end

  parser.on("-X", "--extra-argument ARGUMENT", "Pass ARGUMENT to the compiler") do |value|
    $run_compilation = true
    $extra_arguments << value
  end

  parser.on("-p", "--production", "Leave out debugging metadata") do
    $run_compilation = true
    $production = true
  end

  parser.on("--no-rsls", "Remove all runtime shared libraries") do
    $run_compilation = true
    $extra_arguments << "-runtime-shared-library-path="
  end

  parser.on("--static-rsls", "Use static linking for RSLs") do
    $run_compilation = true
    $extra_arguments << "-static-link-runtime-shared-libraries=true"
  end

  parser.separator ""

  parser.on("-3", "--flex-3", "Use -compatibility-version=3") do |value|
    $run_compilation = true
    $extra_arguments << "-compatibility-version=3"
  end

  parser.on("--halo", "Use the Halo theme") do
    $run_compilation = true
    if FCSHD::FlexHome.known?
      $extra_arguments << "-theme=#{FCSHD::FlexHome.halo_swc}"
    else
      die "must set $FLEX_HOME to use --halo option"
    end
  end

  parser.separator ""

  parser.on("-R", "--restart", "Restart the compiler first") do
    $run_compilation = false if $run_compilation == nil
    $restart_compiler = true
  end

  parser.on("-n", "--dry-run", "Only print the compiler command") do
    $run_compilation = true
    $dry_run = true
    $verbose = true
  end

  parser.on("--verbose", "Also print the compiler command") do
    $verbose = true
  end

  parser.on("-v", "--version", "Show `fcshc #{FCSHD::VERSION}'") do
    puts "fcshc #{FCSHD::VERSION}"
    exit
  end

  parser.on("-h", "--help", "Show this message") do
    puts parser
    exit
  end

  parser.separator ""
  parser.separator "TL;DR: $ fcshc src/my_app.mxml"
end.parse!

$extra_arguments << "-debug" unless $production

for name in ARGV
  $run_compilation = true

  if not File.exists? name
    die "no such file or directory: #{name}"
  elsif File.directory? name
    $directories << File.expand_path(name)
  elsif %w(.as .mxml).include? File.extname(name)
    $source_files << File.expand_path(name)
  elsif %w(.swc).include? File.extname(name)
    $library_files << File.expand_path(name)
  else
    die "don't know what to do with file: #{name}"
  end
end

ENV["FCSHD_LIBRARY_PATH"] ||= "~/.fcshd-lib"

def find_library(name)
  nil.tap do
    for x in ENV["FCSHD_LIBRARY_PATH"].split(":")
      next if x == ""
      x = File.expand_path(x)
      if File.basename(x) == "#{name}.swc" and File.file? x
        return :file, x
      elsif File.directory? File.join(x, name)
        return :directory, File.join(x, name)
      elsif File.file? File.join(x, "#{name}.swc")
        return :file, File.join(x, "#{name}.swc")
      end
    end
  end
end

for library in $libraries
  type, filename = find_library(library)
  case type
  when :directory
    $directories << filename
  when :file
    $library_files << filename
  else
    die "library not found: #{library}"
  end
end

if $run_compilation
  $compiling_swc = $output_file && $output_file.end_with?(".swc")

  if $compiling_swc
    if [$source_files, $directories, $library_files] == [[], [], []]
      die "must include at least one source file, directory, or SWC"
    end

    $compilation_command = ["compc"]

    for file in $source_files
      $compilation_command << "-include-sources+=#{file}"
    end

    for directory in $directories
      $compilation_command << "-include-sources+=#{directory}"
    end

    if FCSHD::FlexHome.known?
      for dir in FCSHD::FlexHome.framework_lib_dirs
        $extra_arguments << "-external-library-path+=#{dir}"
      end
    end
  else
    case $source_files.size
    when 0
      die "missing main application source file"
    when 1
      $source_file = $source_files.first
    else
      die "multiple source files not allowed when compiling SWF"
    end

    if $directories.empty?
      $directories << File.dirname($source_file)
    end

    if $output_file == nil
      $source_file.sub(/\.(as|mxml)$/, ".swf").tap do |x|
        $output_file = File.expand_path(File.basename(x))
      end
    end

    $compilation_command = ["mxmlc", "#$source_file"]
  end

  $compilation_command << "-output=#$output_file"

  for directory in $directories
    $compilation_command << "-compiler.source-path+=#{directory}"
    $compilation_command << "-compiler.library-path+=#{directory}"
  end

  for file in $library_files
    $compilation_command << "-compiler.library-path+=#{file}"
  end

  $compilation_command.concat($extra_arguments)
end

def run_command(command)
  begin
    host, port = "localhost", FCSHD::Server::PORT
    socket = TCPSocket.new(host, port)
  rescue Errno::ECONNREFUSED
    die "could not connect to fcshd at #{host}:#{port}"
  end

  socket.puts command

  compiler_output = ""
  socket.each_line do |line|
    case line
    when /^fcshd: /
      warn line.chomp
    else
      compiler_output << line
    end
  end

  if $verbose
    STDOUT.write compiler_output
  end

  compiler_output
end

run_command "restart" if $restart_compiler

if $run_compilation
  command = $compilation_command.join(" ")

  if $dry_run
    warn command if $verbose
  else
    compiler_output = run_command command
    transcript = FCSHD::Transcript[compiler_output]

    basedir = File.join(File.expand_path("."), "")
    STDOUT.write transcript.to_s(basedir)

    exit 1 if not transcript.succeeded?
  end
end
