#!/usr/bin/env ruby

begin
  require "fcshd"
rescue LoadError
  require "pathname"
  $: << File.expand_path("../../lib", Pathname.new(__FILE__).realpath)
  require "fcshd"
end

require "optparse"
require "socket"

def die(message)
  puts "#{File.basename($0)}: #{message}"
  exit 1
end

$output_file = nil
$source_files = []
$library_files = []
$directories = []
$production = false
$extra_arguments = []
$verbose = false
$dry_run = false

OptionParser.new do |parser|
  parser.banner = <<EOF
Usage: fcshc MAIN.[as|mxml] [SRCDIR|SWCDIR|SWC]... [-o OUTPUT.swf]
       fcshc -o OUTPUT.swc [SRCDIR|SWCDIR|SWC]...

To compile an SWF, name the main application source file, then any
additional source directories, SWC directories, or SWC files.

To compile an SWC using `compc', you must provide the `-o' option, and
then at least one source directory, SWC directory, or SWC file.

To pass extra arguments, use e.g. `-X -include-file -X NAME -X FILE'.

EOF

  parser.on("-o", "--output OUTPUT.[swf|swc]", "Name of the resulting binary") do |value|
    $output_file = File.expand_path(value)
  end

  parser.on("-X", "--extra-argument ARGUMENT", "Pass ARGUMENT to the compiler") do |value|
    $extra_arguments << value
  end

  parser.on("-p", "--production", "Leave out debugging metadata") do
    $production = true
  end

  parser.on("--static-rsls", "Use static linking for RSLs") do
    $extra_arguments << "-static-link-runtime-shared-libraries=true"
  end

  parser.on("--no-rsls", "Remove all runtime shared libraries") do
    $extra_arguments << "-runtime-shared-library-path="
  end

  parser.separator ""

  parser.on("-3", "--flex-3", "Use -compatibility-version=3") do |value|
    $extra_arguments << "-compatibility-version=3"
  end

  parser.on("--halo", "Use the Halo theme") do
    if FCSHD::FlexHome.known?
      $extra_arguments << "-theme=#{FCSHD::FlexHome.halo_swc}"
    else 
      die "must set $FLEX_HOME to use --halo option"
    end
  end

  parser.separator ""

  parser.on("-n", "--dry-run", "Only print the compiler command") do
    $dry_run = true
  end

  parser.on("--verbose", "Also print the compiler command") do
    $verbose = true
  end

  parser.on("-v", "--version", "Show `fcshc #{FCSHD::VERSION}'") do
    puts "fcshc #{FCSHD::VERSION}"
    exit
  end

  parser.on("-h", "--help", "Show this message") do
    puts parser
    exit
  end

  parser.separator ""
  parser.separator "TL;DR: $ fcshc src/my_app.mxml"
end.parse!

$extra_arguments << "-debug" unless $production

for name in ARGV
  if not File.exists? name
    die "no such file or directory: #{name}"
  elsif File.directory? name
    $directories << File.expand_path(name)
  elsif %w(.as .mxml).include? File.extname(name)
    $source_files << File.expand_path(name)
  elsif %w(.swc).include? File.extname(name)
    $library_files << File.expand_path(name)
  else
    die "don't know what to do with file: #{name}"
  end
end

$compiling_swc = $output_file && $output_file.end_with?(".swc")

if $compiling_swc
  if [$source_files, $directories, $library_files] == [[], [], []]
    die "must include at least one source file, directory, or SWC"
  end

  $fcshd_arguments = ["compc"]

  for file in $source_files
    $fcshd_arguments << "-include-sources+=#{file}"
  end

  for directory in $directories
    $fcshd_arguments << "-include-sources+=#{directory}"
  end

  if FCSHD::FlexHome.known?
    for dir in FCSHD::FlexHome.framework_lib_dirs
      $extra_arguments << "-external-library-path+=#{dir}"
    end
  end
else
  case $source_files.size
  when 0: die "missing main application source file"
  when 1: $source_file = $source_files.first
  else die "multiple source files not allowed when compiling SWF"
  end

  if $directories.empty?
    $directories << File.dirname($source_file)
  end

  if $output_file == nil
    $source_file.sub(/\.(as|mxml)$/, ".swf").tap do |x|
      $output_file = File.expand_path(File.basename(x))
    end
  end

  $fcshd_arguments = ["mxmlc", "#$source_file"]
end

$fcshd_arguments << "-output=#$output_file"

for directory in $directories
  $fcshd_arguments << "-compiler.source-path+=#{directory}"
  $fcshd_arguments << "-compiler.library-path+=#{directory}"
end

for file in $library_files
  $fcshd_arguments << "-compiler.library-path+=#{file}"
end

$fcshd_arguments.concat($extra_arguments)

basedir = File.join(File.expand_path("."), "")
fcshd_command = $fcshd_arguments.join(" ")

if $verbose || $dry_run
  warn fcshd_command.gsub(basedir, "")
end

exit if $dry_run

begin
  host, port = "localhost", FCSHD::Server::PORT
  socket = TCPSocket.new(host, port)
rescue Errno::ECONNREFUSED
  die "could not connect to fcshd at #{host}:#{port}"
end

socket.puts fcshd_command

compiler_output = ""
socket.each_line do |line|
  case line
  when /^fcshd: /
    warn line.chomp
  else
    compiler_output << line
  end
end

transcript = FCSHD::Transcript[compiler_output]
STDOUT.write transcript.to_s(basedir)
exit 1 if not transcript.succeeded?
