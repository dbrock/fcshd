#!/usr/bin/env ruby

begin
  require "fcshd"
rescue LoadError
  require "pathname"
  $: << File.expand_path("../../lib", Pathname.new(__FILE__).realpath)
  require "fcshd"
end

require "optparse"
require "socket"

def die(message)
  puts "#{File.basename($0)}: #{message}"
  exit 1
end

$source_directories = []
$library_filenames = []
$extra_arguments = []

OptionParser.new do |parser|
  parser.banner = "Usage: fcshc MAIN [SRCDIR|LIB]... -o OUTPUT"

  parser.on("--halo", "Use the Halo theme") do
    if ENV["FLEX_HOME"]
      $extra_arguments << "-theme=" +
        File.join(ENV["FLEX_HOME"], *%w(frameworks themes Halo halo.swc))
    else
      die "must set $FLEX_HOME to use --halo option"
    end
  end

  parser.on("-o", "--output FILENAME", "Write SWF to FILENAME") do |value|
    $output_filename = File.expand_path(value)
  end

  parser.on("-3", "Use -compatibility-version=3") do |value|
    $extra_arguments << "-compatibility-version=3"
  end

  parser.on("-X EXTRA-ARGUMENT", "Pass EXTRA-ARGUMENT to mxmlc") do |value|
    $extra_arguments << value
  end

  parser.on("-v", "--verbose", "Print mxmlc command line") do
    $verbose = true
  end
end.parse!

for name in ARGV
  if not File.exists? name
    die "no such file or directory: #{name}"
  elsif File.directory? name
    $source_directories << File.expand_path(name)
  elsif %w(.as .mxml).include? File.extname(name)
    die "multiple source files not allowed" if $source_filename
    $source_filename = File.expand_path(name)
  elsif %w(.swc).include? File.extname(name)
    $library_filenames << File.expand_path(name)
  else
    die "don't know what to do with file: #{name}"
  end
end

if $source_filename == nil
  die "missing source file to compile"
end

if $output_filename == nil
  $source_filename.sub(/\.(as|mxml)$/, ".swf").tap do |filename|
    local_filename = File.basename(filename)
    $output_filename = File.expand_path(local_filename)
  end
end

$fcshd_arguments = ["mxmlc #$source_filename -output=#$output_filename"]

for directory in $source_directories
  $fcshd_arguments << "-compiler.source-path+=#{directory}"
end

for filename in $library_filenames
  $fcshd_arguments << "-compiler.library-path+=#{filename}"
end

$fcshd_arguments.concat($extra_arguments)

begin
  host, port = "localhost", 34345
  socket = TCPSocket.new(host, port)
rescue Errno::ECONNREFUSED
  die "Could not connect to fcshd at #{host}:#{port}."
end

basedir = File.join(File.expand_path("."), "")

fcshd_command = $fcshd_arguments.join(" ")
warn fcshd_command.gsub(basedir, "") if $verbose
socket.puts fcshd_command

output = FCSHD::CompilerOutput[socket.read, basedir]
output.write! FCSHD::CompilerOutputWriter.new(STDOUT, basedir)

exit 1 if not output.succeeded?
